############################
Extra Credit with JavaScript
############################

In industry, true full-stack developers are highly valued.
A full-stack developer is one that can write code both for the back-end (with Python, NodeJS, C#, Java, etc.), as well as write code for the front-end (HTML, CSS, JavaScript).
We'll do some front-end work in this class, but we'll rarely if ever actually write any JavaScript.

Until now.

Every data structures/algorithms assignment will now have the option for **5 points extra credit** if you can implement the same data structure/algorithm in JavaScript.
This is a solo submission, so you don't have to coordinate this extra effort with your partner if you don't want to.
There are, of course, some conditions.

1. To be eligible for **any** extra credit, your Python implementation must have received at least an 8/10
2. Your JavaScript code must be in an installable ``npm`` package, complete with ``package.json``. Make sure that the ``node_modules`` directory is appropriately placed in your ``.gitignore``
3. Your implementations must not use constructor functions. Instead, look up the `class <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes>`_ syntax and use that to build your objects.
4. Your JavaScript code must be tested. I recommend using `Jest <https://facebook.github.io/jest/>`_ as your testing framework. **Without tests, you will get no more than 1 of the available 5 points**. You can feel free to implement the same tests you wrote for the Python implementation. I should be able to run your tests from the ``js`` directory by typing ``npm test``
5. Your JavaScript code must be in a ``js`` directory inside of your ``data_structures`` repository. As an example:

.. code-block:: bash

    /data_structures
        .gitignore
        tox.ini
        setup.py
        linked_list.py
        stack.py
        double_linked_list.py
        queue.py
        tests/
            test_linked_list.py
            test_stack.py
            test_double_linked_list.py
            test_queue.py
        js/
            package.json
            linkedList.js
            stack.js
            doubleLinkedList.js
            queue.js
            __test__/
                linkedList.test.js
                stack.test.js
                doubleLinkedList.test.js
                queue.test.js
