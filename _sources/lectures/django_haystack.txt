***********************
Adding Search to Django
***********************

Search Engines and Indexing
===========================

ElasticSearch
=============

* ElasticSearch is an example of a document store, where all the information about one item at a time is stored and is searchable by the information within
* Start it up and set it to run as a background process.
    - On Mac, if installed with Homebrew, ``brew services start elasticsearch``
* Send first ``GET`` request to ``localhost:9200`` to show it's working
* Make a ``POST`` request to ``localhost:9200/<index>/<type>`` to insert a JSON object.
    - ``<index>`` is arbitrary
    - ``<type>`` is arbitrary
    - Each ``<type>`` has its own ID space
    - Different types can have different mappings
    - Add movie data with ``requests`` library
        * Must include ``Content-Type`` header saying the request body will be ``application/json``
        * Data must actually be stringified JSON, *NOT* a dictionary which while serializable to JSON is in fact not JSON
        * ``POST`` requests auto-add IDs for items in ES, but IDs are hashed strings
            - ``r = requests.post('http://localhost:9200/movies/movie', data=json.dumps(data), headers=headers)``
        * ``PUT`` requests to specific IDs can add items to ES
            - ``r = requests.put('http://localhost:9200/movies/movie/2', data=json.dumps(data), headers=headers)``
        * If it worked, the status code on return is 201 - Created
        * Data's key-value pairs are arbitrary.

* Add several items to ElasticSearch store
* Can search through the entire ElasticSearch store, or by index, or by type within index with a ``GET`` request to a url ending in ``_search``.
    - sample query: ``query = {'query': {'query_string': {'query': 'to'}}}``
    - ``r = requests.get('http://localhost:9200/movies/_search', data=json.dumps(query), headers=headers)``
    - response:

.. code-block:: json

    {
        '_shards': 'failed': 0,
        'skipped': 0,
        'successful': 5,
        'total': 5
    },
    'hits': {
        'hits': [{
            '_id': '2',
            '_index': 'movies',
            '_score': 0.66747504,
            '_source': {
                'director': 'Robert Mulligan',
                'title': 'To Kill a Mockingbird',
                'year': 1962
            },
            '_type': 'movie'
        }],
        'max_score': 0.66747504,
        'total': 1
    },
    'timed_out': False,
    'took': 70
    }

* Response meanings:
    - "shards": the number of nodes that ElasticSearch has spread your data across
    - "hits": information about items in ElasticSearch that match your query
        - "hits.hits": the list of actual hits for your search
        - "hits.max_score": the score of the best match for your search. The highest score possible is 1.0, lowest is 0.0
        - "hits.total": the total number of items that matched your search
    - "timed_out": False
    - "took": time it took to complete the search
* As long as there are items in your ElasticSearch store, there will be some data sent back to you.
* If you try to query an index or type that doesn't exist, you'll get a 404
* PUT requests to the proper IDs will still udpate the item at that ID
* Queries can get more specific if fields are specified

.. code-block:: json

    {
        "query": {
            "query_string": {
                "query": "ford",
                "fields": ["title"]
            }
        }
    }

* You can filter your queries by field to locate items that meet certain criteria

.. code-block:: json

    {
        "query": {
            "filtered": {
                "query": {
                    "query_string": {
                        "query": "drama"
                    }
                },
                "filter": {
                    "term": { "year": 1962 }
                }
            }
        }
    }

There are more things you can do with ElasticSearch that get really granular with searches, but this is a decent start.
Let Django Haystack handle the rest.

Django Haystack
===============

- ``pip install django-haystack``
- Add Haystack to ``INSTALLED_APPS`` after all the Django built-ins but before any of your own apps
- Add the ``HAYSTACK_CONNECTIONS`` keyword to your ``settings.py``. It'll look a lot like the settings for your database.

.. code-block:: python

    HAYSTACK_CONNECTIONS = {
        'default': {
            'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
            'URL': os.environ.get('ELASTICSEARCH_URL', 'http://localhost:9200/'),
            'INDEX_NAME': 'haystack'
        }
    }

- Set an environment variable that'll be useful for your deployed site like ``ELASTICSEARCH_URL``, though you can set the default value to just be whatever you've got running on ``localhost``. By default, ElasticSearch will be running on port 9200. That really shouldn't change across machines.
- To add indexes to your ElasticSearch instance through Haystack, with the `SearchIndex` and `Indexable` objects.
    - Create a unique `SearchIndex` per type of model you wish indexed; generally housed in a `search_indexes.py` file
    - Sublcass both `haystack.indexes.SearchIndex` and `haystack.indexes.Indexable`
    - Set fields on the index like you would a Django model, e.g. `indexes.CharField` and `indexes.DateTimeField`
    - Define a `get_model` method to direct your index toward which model it's mimicking
    - Whichever field you want to be primarily searchable should be declared with kwarg of ``document=True``. Your index may only have ONE of these.
    - If you set ``template=True`` on your primary searchable field, you will need to provide a template just like your e-mail template or HTML templates for that index. For our Book Lender application our model's index might look like this:

.. code-block:: python

    from haystack import indexes
    from books.models import Book

    class BookIndex(indexes.SearchIndex, indexes.Indexable):
        title = indexes.CharField(document=True, use_template=True)
        author = indexes.CharField()
        isbn = indexes.CharField()

        def get_model(self):
            return Book

And our template may look like this (assuming we only want to dispay the title and author of our Book objects):

.. code-block:: html

    # in templates/search/indexes/books/book_title.txt

    {{ object.title }}
    {{ object.author }}

- Need to add views for handling searches that use ElasticSearch, as well as URLs for those views to communicate with.

.. code-block:: python
    
    # in urls.py add to your url patterns...

    (r'^search/', include('haystack.urls'))

- Need a form to search with. In ``templates/search/search.html`` we might have something like

.. code-block:: html

    {% extends "base.html" %}

    {% block content %}



Connecting to AWS ElasticSearch
===============================
